#!/bin/bash
sudo bash -c "echo # > proxy-server.conf"
sudo bash -c "echo [DEFAULT] >> proxy-server.conf"
sudo bash -c "echo # bind_ip = 0.0.0.0 >> proxy-server.conf"
sudo bash -c "echo bind_port = 8080 >> proxy-server.conf"
sudo bash -c "echo # keep_idle = 600 >> proxy-server.conf"
sudo bash -c "echo # bind_timeout = 30 >> proxy-server.conf"
sudo bash -c "echo # backlog = 4096 >> proxy-server.conf"
sudo bash -c "echo # swift_dir = /etc/swift >> proxy-server.conf"
sudo bash -c "echo # user = swift >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Enables exposing configuration settings via HTTP GET /info. >> proxy-server.conf"
sudo bash -c "echo # expose_info = true >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Key to use for admin calls that are HMAC signed.  Default is empty, >> proxy-server.conf"
sudo bash -c "echo # which will disable admin calls to /info. >> proxy-server.conf"
sudo bash -c "echo # admin_key = secret_admin_key >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Allows the ability to withhold sections from showing up in the public calls >> proxy-server.conf"
sudo bash -c "echo # to /info.  You can withhold subsections by separating the dict level with a >> proxy-server.conf"
sudo bash -c "echo # ".". Default value is 'swift.valid_api_versions, swift.auto_create_account_prefix' >> proxy-server.conf"
sudo bash -c "echo # which allows all registered features to be listed via HTTP GET /info except >> proxy-server.conf"
sudo bash -c "echo # swift.valid_api_versions and swift.auto_create_account_prefix information. >> proxy-server.conf"
sudo bash -c "echo # As an example, the following would cause the sections 'container_quotas' and >> proxy-server.conf"
sudo bash -c "echo # 'tempurl' to not be listed, and the key max_failed_deletes would be removed from >> proxy-server.conf"
sudo bash -c "echo # bulk_delete. >> proxy-server.conf"
sudo bash -c "echo # disallowed_sections = swift.valid_api_versions, container_quotas, tempurl, bulk_delete.max_failed_deletes >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Use an integer to override the number of pre-forked processes that will >> proxy-server.conf"
sudo bash -c "echo # accept connections.  Should default to the number of effective cpu >> proxy-server.conf"
sudo bash -c "echo # cores in the system.  It's worth noting that individual workers will >> proxy-server.conf"
sudo bash -c "echo # use many eventlet co-routines to service multiple concurrent requests. >> proxy-server.conf"
sudo bash -c "echo # workers = auto >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Maximum concurrent requests per worker >> proxy-server.conf"
sudo bash -c "echo # max_clients = 1024 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Set the following two lines to enable SSL. This is for testing only. >> proxy-server.conf"
sudo bash -c "echo # cert_file = /etc/swift/proxy.crt >> proxy-server.conf"
sudo bash -c "echo # key_file = /etc/swift/proxy.key >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # expiring_objects_container_divisor = 86400 >> proxy-server.conf"
sudo bash -c "echo # expiring_objects_account_name = expiring_objects >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # You can specify default log routing here if you want: >> proxy-server.conf"
sudo bash -c "echo # log_name = swift >> proxy-server.conf"
sudo bash -c "echo # log_facility = LOG_LOCAL0 >> proxy-server.conf"
sudo bash -c "echo # log_level = INFO >> proxy-server.conf"
sudo bash -c "echo # log_headers = false >> proxy-server.conf"
sudo bash -c "echo # log_address = /dev/log >> proxy-server.conf"
sudo bash -c "echo # The following caps the length of log lines to the value given; no limit if >> proxy-server.conf"
sudo bash -c "echo # set to 0, the default. >> proxy-server.conf"
sudo bash -c "echo # log_max_line_length = 0 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # This optional suffix (default is empty) that would be appended to the swift transaction >> proxy-server.conf"
sudo bash -c "echo # id allows one to easily figure out from which cluster that X-Trans-Id belongs to. >> proxy-server.conf"
sudo bash -c "echo # This is very useful when one is managing more than one swift cluster. >> proxy-server.conf"
sudo bash -c "echo # trans_id_suffix = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # comma separated list of functions to call to setup custom log handlers. >> proxy-server.conf"
sudo bash -c "echo # functions get passed: conf, name, log_to_console, log_route, fmt, logger, >> proxy-server.conf"
sudo bash -c "echo # adapted_logger >> proxy-server.conf"
sudo bash -c "echo # log_custom_handlers = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # If set, log_udp_host will override log_address >> proxy-server.conf"
sudo bash -c "echo # log_udp_host = >> proxy-server.conf"
sudo bash -c "echo # log_udp_port = 514 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # You can enable StatsD logging here: >> proxy-server.conf"
sudo bash -c "echo # log_statsd_host = >> proxy-server.conf"
sudo bash -c "echo # log_statsd_port = 8125 >> proxy-server.conf"
sudo bash -c "echo # log_statsd_default_sample_rate = 1.0 >> proxy-server.conf"
sudo bash -c "echo # log_statsd_sample_rate_factor = 1.0 >> proxy-server.conf"
sudo bash -c "echo # log_statsd_metric_prefix = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # List of origin hosts that are allowed for CORS requests in addition to what >> proxy-server.conf"
sudo bash -c "echo # the container has set. >> proxy-server.conf"
sudo bash -c "echo # Use a comma separated list of full URL (http://foo.bar:1234,https://foo.bar) >> proxy-server.conf"
sudo bash -c "echo # cors_allow_origin = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # If True (default) then CORS requests are only allowed if their Origin header >> proxy-server.conf"
sudo bash -c "echo # matches an allowed origin. Otherwise, any Origin is allowed. >> proxy-server.conf"
sudo bash -c "echo # strict_cors_mode = True >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Comma separated list of headers to expose through Access-Control-Expose-Headers, >> proxy-server.conf"
sudo bash -c "echo # in addition to the defaults and any headers set in container metadata (see >> proxy-server.conf"
sudo bash -c "echo # CORS documentation). >> proxy-server.conf"
sudo bash -c "echo # cors_expose_headers = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # client_timeout = 60.0 >> proxy-server.conf"
sudo bash -c "echo # eventlet_debug = false >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # You can set scheduling priority of processes. Niceness values range from -20 >> proxy-server.conf"
sudo bash -c "echo # (most favorable to the process) to 19 (least favorable to the process). >> proxy-server.conf"
sudo bash -c "echo # nice_priority = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # You can set I/O scheduling class and priority of processes. I/O niceness >> proxy-server.conf"
sudo bash -c "echo # class values are IOPRIO_CLASS_RT (realtime), IOPRIO_CLASS_BE (best-effort) and >> proxy-server.conf"
sudo bash -c "echo # IOPRIO_CLASS_IDLE (idle). I/O niceness priority is a number which goes from >> proxy-server.conf"
sudo bash -c "echo # 0 to 7. The higher the value, the lower the I/O priority of the process. >> proxy-server.conf"
sudo bash -c "echo # Work only with ionice_class. >> proxy-server.conf"
sudo bash -c "echo # ionice_class = >> proxy-server.conf"
sudo bash -c "echo # ionice_priority = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [pipeline:main] >> proxy-server.conf"
sudo bash -c "echo # This sample pipeline uses tempauth and is used for SAIO dev work and >> proxy-server.conf"
sudo bash -c "echo # testing. See below for a pipeline using keystone. >> proxy-server.conf"
sudo bash -c "echo pipeline = catch_errors gatekeeper healthcheck proxy-logging cache listing_formats container_sync bulk tempurl ratelimit tempauth copy container-quotas account-quotas slo dlo versioned_writes symlink proxy-logging proxy-server >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # The following pipeline shows keystone integration. Comment out the one >> proxy-server.conf"
sudo bash -c "echo # above and uncomment this one. Additional steps for integrating keystone are >> proxy-server.conf"
sudo bash -c "echo # covered further below in the filter sections for authtoken and keystoneauth. >> proxy-server.conf"
sudo bash -c "echo #pipeline = catch_errors gatekeeper healthcheck proxy-logging cache container_sync bulk tempurl ratelimit authtoken keystoneauth copy container-quotas account-quotas slo dlo versioned_writes symlink proxy-logging proxy-server >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [app:proxy-server] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#proxy >> proxy-server.conf"
sudo bash -c "echo # You can override the default log routing for this app here: >> proxy-server.conf"
sudo bash -c "echo # set log_name = proxy-server >> proxy-server.conf"
sudo bash -c "echo # set log_facility = LOG_LOCAL0 >> proxy-server.conf"
sudo bash -c "echo # set log_level = INFO >> proxy-server.conf"
sudo bash -c "echo # set log_address = /dev/log >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # When deployed behind a proxy, load balancer, or SSL terminator that is >> proxy-server.conf"
sudo bash -c "echo # configured to speak the human-readable (v1) PROXY protocol (see >> proxy-server.conf"
sudo bash -c "echo # http://www.haproxy.org/download/1.7/doc/proxy-protocol.txt), you should set >> proxy-server.conf"
sudo bash -c "echo # this option to true.  The proxy-server will populate the client connection >> proxy-server.conf"
sudo bash -c "echo # information using the PROXY protocol and reject any connection missing a >> proxy-server.conf"
sudo bash -c "echo # valid PROXY line with a 400.  Only v1 (human-readable) of the PROXY protocol >> proxy-server.conf"
sudo bash -c "echo # is supported. >> proxy-server.conf"
sudo bash -c "echo # require_proxy_protocol = false >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # log_handoffs = true >> proxy-server.conf"
sudo bash -c "echo # recheck_account_existence = 60 >> proxy-server.conf"
sudo bash -c "echo # recheck_container_existence = 60 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # How long the proxy should cache a set of shard ranges for a container when >> proxy-server.conf"
sudo bash -c "echo # the set is to be used for directing object updates. >> proxy-server.conf"
sudo bash -c "echo # Note that stale shard range info should be fine; updates will still >> proxy-server.conf"
sudo bash -c "echo # eventually make their way to the correct shard. As a result, you can >> proxy-server.conf"
sudo bash -c "echo # usually set this much higher than the existence checks above. >> proxy-server.conf"
sudo bash -c "echo # recheck_updating_shard_ranges = 3600 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # How long the proxy should cache a set of shard ranges for a container when >> proxy-server.conf"
sudo bash -c "echo # the set is to be used for gathering object listings. >> proxy-server.conf"
sudo bash -c "echo # Note that stale shard range info might result in incomplete object listings >> proxy-server.conf"
sudo bash -c "echo # so this value should be set less than recheck_updating_shard_ranges. >> proxy-server.conf"
sudo bash -c "echo # recheck_listing_shard_ranges = 600 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # object_chunk_size = 65536 >> proxy-server.conf"
sudo bash -c "echo # client_chunk_size = 65536 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # How long the proxy server will wait on responses from the a/c/o servers. >> proxy-server.conf"
sudo bash -c "echo # node_timeout = 10 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # How long the proxy server will wait for an initial response and to read a >> proxy-server.conf"
sudo bash -c "echo # chunk of data from the object servers while serving GET / HEAD requests. >> proxy-server.conf"
sudo bash -c "echo # Timeouts from these requests can be recovered from so setting this to >> proxy-server.conf"
sudo bash -c "echo # something lower than node_timeout would provide quicker error recovery >> proxy-server.conf"
sudo bash -c "echo # while allowing for a longer timeout for non-recoverable requests (PUTs). >> proxy-server.conf"
sudo bash -c "echo # Defaults to node_timeout, should be overridden if node_timeout is set to a >> proxy-server.conf"
sudo bash -c "echo # high number to prevent client timeouts from firing before the proxy server >> proxy-server.conf"
sudo bash -c "echo # has a chance to retry. >> proxy-server.conf"
sudo bash -c "echo # recoverable_node_timeout = node_timeout >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # conn_timeout = 0.5 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # How long to wait for requests to finish after a quorum has been established. >> proxy-server.conf"
sudo bash -c "echo # post_quorum_timeout = 0.5 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # How long without an error before a node's error count is reset. This will >> proxy-server.conf"
sudo bash -c "echo # also be how long before a node is reenabled after suppression is triggered. >> proxy-server.conf"
sudo bash -c "echo # Set to 0 to disable error-limiting. >> proxy-server.conf"
sudo bash -c "echo # error_suppression_interval = 60.0 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # How many errors can accumulate before a node is temporarily ignored. >> proxy-server.conf"
sudo bash -c "echo # error_suppression_limit = 10 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # If set to 'true' any authorized user may create and delete accounts; if >> proxy-server.conf"
sudo bash -c "echo # 'false' no one, even authorized, can. >> proxy-server.conf"
sudo bash -c "echo allow_account_management = true >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # If set to 'true' authorized accounts that do not yet exist within the Swift >> proxy-server.conf"
sudo bash -c "echo # cluster will be automatically created. >> proxy-server.conf"
sudo bash -c "echo account_autocreate = true >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # If set to a positive value, trying to create a container when the account >> proxy-server.conf"
sudo bash -c "echo # already has at least this maximum containers will result in a 403 Forbidden. >> proxy-server.conf"
sudo bash -c "echo # Note: This is a soft limit, meaning a user might exceed the cap for >> proxy-server.conf"
sudo bash -c "echo # recheck_account_existence before the 403s kick in. >> proxy-server.conf"
sudo bash -c "echo # max_containers_per_account = 0 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # This is a comma separated list of account hashes that ignore the >> proxy-server.conf"
sudo bash -c "echo # max_containers_per_account cap. >> proxy-server.conf"
sudo bash -c "echo # max_containers_whitelist = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Comma separated list of Host headers to which the proxy will deny requests. >> proxy-server.conf"
sudo bash -c "echo # deny_host_headers = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # During GET and HEAD requests, storage nodes can be chosen at random >> proxy-server.conf"
sudo bash -c "echo # (shuffle), by using timing measurements (timing), or by using an explicit >> proxy-server.conf"
sudo bash -c "echo # region/zone match (affinity). Using timing measurements may allow for lower >> proxy-server.conf"
sudo bash -c "echo # overall latency, while using affinity allows for finer control. In both the >> proxy-server.conf"
sudo bash -c "echo # timing and affinity cases, equally-sorting nodes are still randomly chosen to >> proxy-server.conf"
sudo bash -c "echo # spread load. >> proxy-server.conf"
sudo bash -c "echo # The valid values for sorting_method are "affinity", "shuffle", or "timing". >> proxy-server.conf"
sudo bash -c "echo # This option may be overridden in a per-policy configuration section. >> proxy-server.conf"
sudo bash -c "echo # sorting_method = shuffle >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # If the "timing" sorting_method is used, the timings will only be valid for >> proxy-server.conf"
sudo bash -c "echo # the number of seconds configured by timing_expiry. >> proxy-server.conf"
sudo bash -c "echo # timing_expiry = 300 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Normally, you should only be moving one replica's worth of data at a time >> proxy-server.conf"
sudo bash -c "echo # when rebalancing. If you're rebalancing more aggressively, increase this >> proxy-server.conf"
sudo bash -c "echo # to avoid erroneously returning a 404 when the primary assignments that >> proxy-server.conf"
sudo bash -c "echo # *didn't* change get overloaded. >> proxy-server.conf"
sudo bash -c "echo # rebalance_missing_suppression_count = 1 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # By default on a GET/HEAD swift will connect to a minimum number storage nodes >> proxy-server.conf"
sudo bash -c "echo # in a minimum number of threads - for replicated data just a single request to >> proxy-server.conf"
sudo bash -c "echo # a single node one at a time.  When enabled concurrent_gets allows the proxy >> proxy-server.conf"
sudo bash -c "echo # to use up to replica count threads when waiting on a response.  In >> proxy-server.conf"
sudo bash -c "echo # conjunction with the concurrency_timeout option this will allow swift to send >> proxy-server.conf"
sudo bash -c "echo # out GET/HEAD requests to the storage nodes concurrently and answer as soon as >> proxy-server.conf"
sudo bash -c "echo # the minimum number of backend responses are available - in replicated >> proxy-server.conf"
sudo bash -c "echo # contexts this will be the first backend replica to respond. >> proxy-server.conf"
sudo bash -c "echo # concurrent_gets = off >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # This parameter controls how long to wait before firing off the next >> proxy-server.conf"
sudo bash -c "echo # concurrent_get thread. A value of 0 would be fully concurrent, any other >> proxy-server.conf"
sudo bash -c "echo # number will stagger the firing of the threads. This number should be >> proxy-server.conf"
sudo bash -c "echo # between 0 and node_timeout. The default is what ever you set for the >> proxy-server.conf"
sudo bash -c "echo # conn_timeout parameter. >> proxy-server.conf"
sudo bash -c "echo # concurrency_timeout = 0.5 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # By default on a EC GET request swift will connect to a minimum number of >> proxy-server.conf"
sudo bash -c "echo # storage nodes in a minimum number of threads - for erasure coded data, ndata >> proxy-server.conf"
sudo bash -c "echo # requests to primary nodes are started at the same time.  When greater than >> proxy-server.conf"
sudo bash -c "echo # zero this option provides additional robustness and may reduce first byte >> proxy-server.conf"
sudo bash -c "echo # latency by starting additional requests - up to as many as nparity. >> proxy-server.conf"
sudo bash -c "echo # concurrent_ec_extra_requests = 0 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Set to the number of nodes to contact for a normal request. You can use >> proxy-server.conf"
sudo bash -c "echo # '* replicas' at the end to have it use the number given times the number of >> proxy-server.conf"
sudo bash -c "echo # replicas for the ring being used for the request. >> proxy-server.conf"
sudo bash -c "echo # request_node_count = 2 * replicas >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Specifies which backend servers to prefer on reads. Format is a comma >> proxy-server.conf"
sudo bash -c "echo # separated list of affinity descriptors of the form <selection>=<priority>. >> proxy-server.conf"
sudo bash -c "echo # The <selection> may be r<N> for selecting nodes in region N or r<N>z<M> for >> proxy-server.conf"
sudo bash -c "echo # selecting nodes in region N, zone M. The <priority> value should be a whole >> proxy-server.conf"
sudo bash -c "echo # number that represents the priority to be given to the selection; lower >> proxy-server.conf"
sudo bash -c "echo # numbers are higher priority. >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Example: first read from region 1 zone 1, then region 1 zone 2, then >> proxy-server.conf"
sudo bash -c "echo # anything in region 2, then everything else: >> proxy-server.conf"
sudo bash -c "echo # read_affinity = r1z1=100, r1z2=200, r2=300 >> proxy-server.conf"
sudo bash -c "echo # Default is empty, meaning no preference. >> proxy-server.conf"
sudo bash -c "echo # This option may be overridden in a per-policy configuration section. >> proxy-server.conf"
sudo bash -c "echo # read_affinity = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Specifies which backend servers to prefer on object writes. Format is a comma >> proxy-server.conf"
sudo bash -c "echo # separated list of affinity descriptors of the form r<N> for region N or >> proxy-server.conf"
sudo bash -c "echo # r<N>z<M> for region N, zone M. If this is set, then when handling an object >> proxy-server.conf"
sudo bash -c "echo # PUT request, some number (see setting write_affinity_node_count) of local >> proxy-server.conf"
sudo bash -c "echo # backend servers will be tried before any nonlocal ones. >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Example: try to write to regions 1 and 2 before writing to any other >> proxy-server.conf"
sudo bash -c "echo # nodes: >> proxy-server.conf"
sudo bash -c "echo # write_affinity = r1, r2 >> proxy-server.conf"
sudo bash -c "echo # Default is empty, meaning no preference. >> proxy-server.conf"
sudo bash -c "echo # This option may be overridden in a per-policy configuration section. >> proxy-server.conf"
sudo bash -c "echo # write_affinity = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The number of local (as governed by the write_affinity setting) nodes to >> proxy-server.conf"
sudo bash -c "echo # attempt to contact first on writes, before any non-local ones. The value >> proxy-server.conf"
sudo bash -c "echo # should be an integer number, or use '* replicas' at the end to have it use >> proxy-server.conf"
sudo bash -c "echo # the number given times the number of replicas for the ring being used for the >> proxy-server.conf"
sudo bash -c "echo # request. >> proxy-server.conf"
sudo bash -c "echo # This option may be overridden in a per-policy configuration section. >> proxy-server.conf"
sudo bash -c "echo # write_affinity_node_count = 2 * replicas >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The number of local (as governed by the write_affinity setting) handoff nodes >> proxy-server.conf"
sudo bash -c "echo # to attempt to contact on deletion, in addition to primary nodes. >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Example: in geographically distributed deployment of 2 regions, If >> proxy-server.conf"
sudo bash -c "echo # replicas=3, sometimes there may be 1 primary node and 2 local handoff nodes >> proxy-server.conf"
sudo bash -c "echo # in one region holding the object after uploading but before object replicated >> proxy-server.conf"
sudo bash -c "echo # to the appropriate locations in other regions. In this case, include these >> proxy-server.conf"
sudo bash -c "echo # handoff nodes to send request when deleting object could help make correct >> proxy-server.conf"
sudo bash -c "echo # decision for the response. The default value 'auto' means Swift will >> proxy-server.conf"
sudo bash -c "echo # calculate the number automatically, the default value is >> proxy-server.conf"
sudo bash -c "echo # (replicas - len(local_primary_nodes)). This option may be overridden in a >> proxy-server.conf"
sudo bash -c "echo # per-policy configuration section. >> proxy-server.conf"
sudo bash -c "echo # write_affinity_handoff_delete_count = auto >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # These are the headers whose values will only be shown to swift_owners. The >> proxy-server.conf"
sudo bash -c "echo # exact definition of a swift_owner is up to the auth system in use, but >> proxy-server.conf"
sudo bash -c "echo # usually indicates administrative responsibilities. >> proxy-server.conf"
sudo bash -c "echo # swift_owner_headers = x-container-read, x-container-write, x-container-sync-key, x-container-sync-to, x-account-meta-temp-url-key, x-account-meta-temp-url-key-2, x-container-meta-temp-url-key, x-container-meta-temp-url-key-2, x-account-access-control >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # You can set scheduling priority of processes. Niceness values range from -20 >> proxy-server.conf"
sudo bash -c "echo # (most favorable to the process) to 19 (least favorable to the process). >> proxy-server.conf"
sudo bash -c "echo # nice_priority = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # You can set I/O scheduling class and priority of processes. I/O niceness >> proxy-server.conf"
sudo bash -c "echo # class values are IOPRIO_CLASS_RT (realtime), IOPRIO_CLASS_BE (best-effort) and >> proxy-server.conf"
sudo bash -c "echo # IOPRIO_CLASS_IDLE (idle). I/O niceness priority is a number which goes from >> proxy-server.conf"
sudo bash -c "echo # 0 to 7. The higher the value, the lower the I/O priority of the process. >> proxy-server.conf"
sudo bash -c "echo # Work only with ionice_class. >> proxy-server.conf"
sudo bash -c "echo # ionice_class = >> proxy-server.conf"
sudo bash -c "echo # ionice_priority = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # When upgrading from liberasurecode<=1.5.0, you may want to continue writing >> proxy-server.conf"
sudo bash -c "echo # legacy CRCs until all nodes are upgraded and capabale of reading fragments >> proxy-server.conf"
sudo bash -c "echo # with zlib CRCs. liberasurecode>=1.6.2 checks for the environment variable >> proxy-server.conf"
sudo bash -c "echo # LIBERASURECODE_WRITE_LEGACY_CRC; if set (value doesn't matter), it will use >> proxy-server.conf"
sudo bash -c "echo # its legacy CRC. Set this option to true or false to ensure the environment >> proxy-server.conf"
sudo bash -c "echo # variable is or is not set. Leave the option blank or absent to not touch >> proxy-server.conf"
sudo bash -c "echo # the environment (default). For more information, see >> proxy-server.conf"
sudo bash -c "echo # https://bugs.launchpad.net/liberasurecode/+bug/1886088 >> proxy-server.conf"
sudo bash -c "echo # write_legacy_ec_crc = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Some proxy-server configuration options may be overridden on a per-policy >> proxy-server.conf"
sudo bash -c "echo # basis by including per-policy config section(s). The value of any option >> proxy-server.conf"
sudo bash -c "echo # specified a per-policy section will override any value given in the >> proxy-server.conf"
sudo bash -c "echo # proxy-server section for that policy only. Otherwise the value of these >> proxy-server.conf"
sudo bash -c "echo # options will be that specified in the proxy-server section. >> proxy-server.conf"
sudo bash -c "echo # The section name should refer to the policy index, not the policy name. >> proxy-server.conf"
sudo bash -c "echo # [proxy-server:policy:<policy index>] >> proxy-server.conf"
sudo bash -c "echo # sorting_method = >> proxy-server.conf"
sudo bash -c "echo # read_affinity = >> proxy-server.conf"
sudo bash -c "echo # write_affinity = >> proxy-server.conf"
sudo bash -c "echo # write_affinity_node_count = >> proxy-server.conf"
sudo bash -c "echo # write_affinity_handoff_delete_count = >> proxy-server.conf"
sudo bash -c "echo # rebalance_missing_suppression_count = 1 >> proxy-server.conf"
sudo bash -c "echo # concurrent_gets = off >> proxy-server.conf"
sudo bash -c "echo # concurrency_timeout = 0.5 >> proxy-server.conf"
sudo bash -c "echo # concurrent_ec_extra_requests = 0 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:tempauth] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#tempauth >> proxy-server.conf"
sudo bash -c "echo # You can override the default log routing for this filter here: >> proxy-server.conf"
sudo bash -c "echo # set log_name = tempauth >> proxy-server.conf"
sudo bash -c "echo # set log_facility = LOG_LOCAL0 >> proxy-server.conf"
sudo bash -c "echo # set log_level = INFO >> proxy-server.conf"
sudo bash -c "echo # set log_headers = false >> proxy-server.conf"
sudo bash -c "echo # set log_address = /dev/log >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The reseller prefix will verify a token begins with this prefix before even >> proxy-server.conf"
sudo bash -c "echo # attempting to validate it. Also, with authorization, only Swift storage >> proxy-server.conf"
sudo bash -c "echo # accounts with this prefix will be authorized by this middleware. Useful if >> proxy-server.conf"
sudo bash -c "echo # multiple auth systems are in use for one Swift cluster. >> proxy-server.conf"
sudo bash -c "echo # The reseller_prefix may contain a comma separated list of items. The first >> proxy-server.conf"
sudo bash -c "echo # item is used for the token as mentioned above. If second and subsequent >> proxy-server.conf"
sudo bash -c "echo # items exist, the middleware will handle authorization for an account with >> proxy-server.conf"
sudo bash -c "echo # that prefix. For example, for prefixes "AUTH, SERVICE", a path of >> proxy-server.conf"
sudo bash -c "echo # /v1/SERVICE_account is handled the same as /v1/AUTH_account. If an empty >> proxy-server.conf"
sudo bash -c "echo # (blank) reseller prefix is required, it must be first in the list. Two >> proxy-server.conf"
sudo bash -c "echo # single quote characters indicates an empty (blank) reseller prefix. >> proxy-server.conf"
sudo bash -c "echo # reseller_prefix = AUTH >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The require_group parameter names a group that must be presented by >> proxy-server.conf"
sudo bash -c "echo # either X-Auth-Token or X-Service-Token. Usually this parameter is >> proxy-server.conf"
sudo bash -c "echo # used only with multiple reseller prefixes (e.g., SERVICE_require_group=blah). >> proxy-server.conf"
sudo bash -c "echo # By default, no group is needed. Do not use .admin. >> proxy-server.conf"
sudo bash -c "echo # require_group = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # The auth prefix will cause requests beginning with this prefix to be routed >> proxy-server.conf"
sudo bash -c "echo # to the auth subsystem, for granting tokens, etc. >> proxy-server.conf"
sudo bash -c "echo # auth_prefix = /auth/ >> proxy-server.conf"
sudo bash -c "echo # token_life = 86400 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # This allows middleware higher in the WSGI pipeline to override auth >> proxy-server.conf"
sudo bash -c "echo # processing, useful for middleware such as tempurl and formpost. If you know >> proxy-server.conf"
sudo bash -c "echo # you're not going to use such middleware and you want a bit of extra security, >> proxy-server.conf"
sudo bash -c "echo # you can set this to false. >> proxy-server.conf"
sudo bash -c "echo # allow_overrides = true >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # This specifies what scheme to return with storage URLs: >> proxy-server.conf"
sudo bash -c "echo # http, https, or default (chooses based on what the server is running as) >> proxy-server.conf"
sudo bash -c "echo # This can be useful with an SSL load balancer in front of a non-SSL server. >> proxy-server.conf"
sudo bash -c "echo # storage_url_scheme = default >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Lastly, you need to list all the accounts/users you want here. The format is: >> proxy-server.conf"
sudo bash -c "echo #   user_<account>_<user> = <key> [group] [group] [...] [storage_url] >> proxy-server.conf"
sudo bash -c "echo # or if you want underscores in <account> or <user>, you can base64 encode them >> proxy-server.conf"
sudo bash -c "echo # (with no equal signs) and use this format: >> proxy-server.conf"
sudo bash -c "echo #   user64_<account_b64>_<user_b64> = <key> [group] [group] [...] [storage_url] >> proxy-server.conf"
sudo bash -c "echo # There are special groups of: >> proxy-server.conf"
sudo bash -c "echo #   .reseller_admin = can do anything to any account for this auth >> proxy-server.conf"
sudo bash -c "echo #   .reseller_reader = can GET/HEAD anything in any account for this auth >> proxy-server.conf"
sudo bash -c "echo #   .admin = can do anything within the account >> proxy-server.conf"
sudo bash -c "echo # If none of these groups are specified, the user can only access containers >> proxy-server.conf"
sudo bash -c "echo # that have been explicitly allowed for them by a .admin or .reseller_admin. >> proxy-server.conf"
sudo bash -c "echo # The trailing optional storage_url allows you to specify an alternate url to >> proxy-server.conf"
sudo bash -c "echo # hand back to the user upon authentication. If not specified, this defaults to >> proxy-server.conf"
sudo bash -c "echo # $HOST/v1/<reseller_prefix>_<account> where $HOST will do its best to resolve >> proxy-server.conf"
sudo bash -c "echo # to what the requester would need to use to reach this host. >> proxy-server.conf"
sudo bash -c "echo # Here are example entries, required for running the tests: >> proxy-server.conf"
sudo bash -c "echo user_admin_admin = admin .admin .reseller_admin >> proxy-server.conf"
sudo bash -c "echo user_admin_auditor = admin_ro .reseller_reader >> proxy-server.conf"
sudo bash -c "echo user_test_tester = testing .admin >> proxy-server.conf"
sudo bash -c "echo user_test_tester2 = testing2 .admin >> proxy-server.conf"
sudo bash -c "echo user_test_tester3 = testing3 >> proxy-server.conf"
sudo bash -c "echo user_test2_tester2 = testing2 .admin >> proxy-server.conf"
sudo bash -c "echo user_test5_tester5 = testing5 service >> proxy-server.conf"
sudo bash -c "echo user_$USER_me = secretpassword .admin .reseller_admin >> proxy-server.conf"
sudo bash -c "echo # To enable Keystone authentication you need to have the auth token >> proxy-server.conf"
sudo bash -c "echo # middleware first to be configured. Here is an example below, please >> proxy-server.conf"
sudo bash -c "echo # refer to the keystone's documentation for details about the >> proxy-server.conf"
sudo bash -c "echo # different settings. >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # You'll also need to have the keystoneauth middleware enabled and have it in >> proxy-server.conf"
sudo bash -c "echo # your main pipeline, as show in the sample pipeline at the top of this file. >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Following parameters are known to work with keystonemiddleware v2.3.0 >> proxy-server.conf"
sudo bash -c "echo # (above v2.0.0), but checking the latest information in the wiki page[1] >> proxy-server.conf"
sudo bash -c "echo # is recommended. >> proxy-server.conf"
sudo bash -c "echo # 1. https://docs.openstack.org/keystonemiddleware/latest/middlewarearchitecture.html#configuration >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # [filter:authtoken] >> proxy-server.conf"
sudo bash -c "echo # paste.filter_factory = keystonemiddleware.auth_token:filter_factory >> proxy-server.conf"
sudo bash -c "echo # www_authenticate_uri = http://keystonehost:5000 >> proxy-server.conf"
sudo bash -c "echo # auth_url = http://keystonehost:5000 >> proxy-server.conf"
sudo bash -c "echo # auth_plugin = password >> proxy-server.conf"
sudo bash -c "echo # The following credentials must match the Keystone credentials for the Swift >> proxy-server.conf"
sudo bash -c "echo # service and may need to be changed to match your Keystone configuration. The >> proxy-server.conf"
sudo bash -c "echo # example values shown here assume a user named 'swift' with admin role on a >> proxy-server.conf"
sudo bash -c "echo # project named 'service', both being in the Keystone domain with id 'default'. >> proxy-server.conf"
sudo bash -c "echo # Refer to the keystonemiddleware documentation link above [1] for other >> proxy-server.conf"
sudo bash -c "echo # examples. >> proxy-server.conf"
sudo bash -c "echo # project_domain_id = default >> proxy-server.conf"
sudo bash -c "echo # user_domain_id = default >> proxy-server.conf"
sudo bash -c "echo # project_name = service >> proxy-server.conf"
sudo bash -c "echo # username = swift >> proxy-server.conf"
sudo bash -c "echo # password = password >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # delay_auth_decision defaults to False, but leaving it as false will >> proxy-server.conf"
sudo bash -c "echo # prevent other auth systems, staticweb, tempurl, formpost, and ACLs from >> proxy-server.conf"
sudo bash -c "echo # working. This value must be explicitly set to True. >> proxy-server.conf"
sudo bash -c "echo # delay_auth_decision = False >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # cache = swift.cache >> proxy-server.conf"
sudo bash -c "echo # include_service_catalog = False >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # [filter:keystoneauth] >> proxy-server.conf"
sudo bash -c "echo # use = egg:swift#keystoneauth >> proxy-server.conf"
sudo bash -c "echo # The reseller_prefix option lists account namespaces that this middleware is >> proxy-server.conf"
sudo bash -c "echo # responsible for. The prefix is placed before the Keystone project id. >> proxy-server.conf"
sudo bash -c "echo # For example, for project 12345678, and prefix AUTH, the account is >> proxy-server.conf"
sudo bash -c "echo # named AUTH_12345678 (i.e., path is /v1/AUTH_12345678/...). >> proxy-server.conf"
sudo bash -c "echo # Several prefixes are allowed by specifying a comma-separated list >> proxy-server.conf"
sudo bash -c "echo # as in: "reseller_prefix = AUTH, SERVICE". The empty string indicates a >> proxy-server.conf"
sudo bash -c "echo # single blank/empty prefix. If an empty prefix is required in a list of >> proxy-server.conf"
sudo bash -c "echo # prefixes, a value of '' (two single quote characters) indicates a >> proxy-server.conf"
sudo bash -c "echo # blank/empty prefix. Except for the blank/empty prefix, an underscore ('_') >> proxy-server.conf"
sudo bash -c "echo # character is appended to the value unless already present. >> proxy-server.conf"
sudo bash -c "echo # reseller_prefix = AUTH >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The user must have at least one role named by operator_roles on a >> proxy-server.conf"
sudo bash -c "echo # project in order to create, delete and modify containers and objects >> proxy-server.conf"
sudo bash -c "echo # and to set and read privileged headers such as ACLs. >> proxy-server.conf"
sudo bash -c "echo # If there are several reseller prefix items, you can prefix the >> proxy-server.conf"
sudo bash -c "echo # parameter so it applies only to those accounts (for example >> proxy-server.conf"
sudo bash -c "echo # the parameter SERVICE_operator_roles applies to the /v1/SERVICE_<project> >> proxy-server.conf"
sudo bash -c "echo # path). If you omit the prefix, the option applies to all reseller >> proxy-server.conf"
sudo bash -c "echo # prefix items. For the blank/empty prefix, prefix with '' (do not put >> proxy-server.conf"
sudo bash -c "echo # underscore after the two single quote characters). >> proxy-server.conf"
sudo bash -c "echo # operator_roles = admin, swiftoperator >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The reseller admin role has the ability to create and delete accounts >> proxy-server.conf"
sudo bash -c "echo # reseller_admin_role = ResellerAdmin >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # This allows middleware higher in the WSGI pipeline to override auth >> proxy-server.conf"
sudo bash -c "echo # processing, useful for middleware such as tempurl and formpost. If you know >> proxy-server.conf"
sudo bash -c "echo # you're not going to use such middleware and you want a bit of extra security, >> proxy-server.conf"
sudo bash -c "echo # you can set this to false. >> proxy-server.conf"
sudo bash -c "echo # allow_overrides = true >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # If the service_roles parameter is present, an X-Service-Token must be >> proxy-server.conf"
sudo bash -c "echo # present in the request that when validated, grants at least one role listed >> proxy-server.conf"
sudo bash -c "echo # in the parameter. The X-Service-Token may be scoped to any project. >> proxy-server.conf"
sudo bash -c "echo # If there are several reseller prefix items, you can prefix the >> proxy-server.conf"
sudo bash -c "echo # parameter so it applies only to those accounts (for example >> proxy-server.conf"
sudo bash -c "echo # the parameter SERVICE_service_roles applies to the /v1/SERVICE_<project> >> proxy-server.conf"
sudo bash -c "echo # path). If you omit the prefix, the option applies to all reseller >> proxy-server.conf"
sudo bash -c "echo # prefix items. For the blank/empty prefix, prefix with '' (do not put >> proxy-server.conf"
sudo bash -c "echo # underscore after the two single quote characters). >> proxy-server.conf"
sudo bash -c "echo # By default, no service_roles are required. >> proxy-server.conf"
sudo bash -c "echo # service_roles = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # For backwards compatibility, keystoneauth will match names in cross-tenant >> proxy-server.conf"
sudo bash -c "echo # access control lists (ACLs) when both the requesting user and the tenant >> proxy-server.conf"
sudo bash -c "echo # are in the default domain i.e the domain to which existing tenants are >> proxy-server.conf"
sudo bash -c "echo # migrated. The default_domain_id value configured here should be the same as >> proxy-server.conf"
sudo bash -c "echo # the value used during migration of tenants to keystone domains. >> proxy-server.conf"
sudo bash -c "echo # default_domain_id = default >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # For a new installation, or an installation in which keystone projects may >> proxy-server.conf"
sudo bash -c "echo # move between domains, you should disable backwards compatible name matching >> proxy-server.conf"
sudo bash -c "echo # in ACLs by setting allow_names_in_acls to false: >> proxy-server.conf"
sudo bash -c "echo # allow_names_in_acls = true >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # In OpenStack terms, these reader roles are scoped for system: they >> proxy-server.conf"
sudo bash -c "echo # can read anything across projects and domains. >> proxy-server.conf"
sudo bash -c "echo # They are used for auditing and compliance fuctions. >> proxy-server.conf"
sudo bash -c "echo # In Swift terms, these roles are as powerful as the reseller_admin_role, >> proxy-server.conf"
sudo bash -c "echo # only do not modify the cluster. >> proxy-server.conf"
sudo bash -c "echo # By default the list of reader roles is empty. >> proxy-server.conf"
sudo bash -c "echo # system_reader_roles = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # This is a reader role scoped for a Keystone project. >> proxy-server.conf"
sudo bash -c "echo # An identity that has this role can read anything in a project, so it is >> proxy-server.conf"
sudo bash -c "echo # basically a swiftoperator, but read-only. >> proxy-server.conf"
sudo bash -c "echo # project_reader_roles = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:s3api] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#s3api >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # s3api setup: >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # With either tempauth or your custom auth: >> proxy-server.conf"
sudo bash -c "echo # - Put s3api just before your auth filter(s) in the pipeline >> proxy-server.conf"
sudo bash -c "echo # With keystone: >> proxy-server.conf"
sudo bash -c "echo # - Put s3api and s3token before keystoneauth in the pipeline, but after >> proxy-server.conf"
sudo bash -c "echo #   auth_token >> proxy-server.conf"
sudo bash -c "echo # If you have ratelimit enabled for Swift requests, you may want to place a >> proxy-server.conf"
sudo bash -c "echo # second copy after auth to also ratelimit S3 requests. >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Swift has no concept of the S3's resource owner; the resources >> proxy-server.conf"
sudo bash -c "echo # (i.e. containers and objects) created via the Swift API have no owner >> proxy-server.conf"
sudo bash -c "echo # information. This option specifies how the s3api middleware handles them >> proxy-server.conf"
sudo bash -c "echo # with the S3 API.  If this option is 'false', such kinds of resources will be >> proxy-server.conf"
sudo bash -c "echo # invisible and no users can access them with the S3 API.  If set to 'true', >> proxy-server.conf"
sudo bash -c "echo # a resource without an owner belongs to everyone and everyone can access it >> proxy-server.conf"
sudo bash -c "echo # with the S3 API.  If you care about S3 compatibility, set 'false' here.  This >> proxy-server.conf"
sudo bash -c "echo # option makes sense only when the s3_acl option is set to 'true' and your >> proxy-server.conf"
sudo bash -c "echo # Swift cluster has the resources created via the Swift API. >> proxy-server.conf"
sudo bash -c "echo # allow_no_owner = false >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Set a region name of your Swift cluster.  Note that the s3api doesn't choose >> proxy-server.conf"
sudo bash -c "echo # a region of the newly created bucket.  This value is used for the >> proxy-server.conf"
sudo bash -c "echo # GET Bucket location API and v4 signatures calculation. >> proxy-server.conf"
sudo bash -c "echo # location = us-east-1 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Set whether to enforce DNS-compliant bucket names. Note that S3 enforces >> proxy-server.conf"
sudo bash -c "echo # these conventions in all regions except the US Standard region. >> proxy-server.conf"
sudo bash -c "echo # dns_compliant_bucket_names = True >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Set the default maximum number of objects returned in the GET Bucket >> proxy-server.conf"
sudo bash -c "echo # response. >> proxy-server.conf"
sudo bash -c "echo # max_bucket_listing = 1000 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Set the maximum number of parts returned in the List Parts operation. >> proxy-server.conf"
sudo bash -c "echo # (default: 1000 as well as S3 specification) >> proxy-server.conf"
sudo bash -c "echo # If setting it larger than 10000 (swift container_listing_limit default) >> proxy-server.conf"
sudo bash -c "echo # make sure you also increase the container_listing_limit in swift.conf. >> proxy-server.conf"
sudo bash -c "echo # max_parts_listing = 1000 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Set the maximum number of objects we can delete with the Multi-Object Delete >> proxy-server.conf"
sudo bash -c "echo # operation. >> proxy-server.conf"
sudo bash -c "echo # max_multi_delete_objects = 1000 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Set the number of objects to delete at a time with the Multi-Object Delete >> proxy-server.conf"
sudo bash -c "echo # operation. >> proxy-server.conf"
sudo bash -c "echo # multi_delete_concurrency = 2 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # If set to 'true', s3api uses its own metadata for ACLs >> proxy-server.conf"
sudo bash -c "echo # (e.g. X-Container-Sysmeta-S3Api-Acl) to achieve the best S3 compatibility. >> proxy-server.conf"
sudo bash -c "echo # If set to 'false', s3api tries to use Swift ACLs (e.g. X-Container-Read) >> proxy-server.conf"
sudo bash -c "echo # instead of S3 ACLs as far as possible. >> proxy-server.conf"
sudo bash -c "echo # There are some caveats that one should know about this setting. Firstly, >> proxy-server.conf"
sudo bash -c "echo # if set to 'false' after being previously set to 'true' any new objects or >> proxy-server.conf"
sudo bash -c "echo # containers stored while 'true' setting will be accessible to all users >> proxy-server.conf"
sudo bash -c "echo # because the s3 ACLs will be ignored under s3_acl=False setting. Secondly, >> proxy-server.conf"
sudo bash -c "echo # s3_acl True mode don't keep ACL consistency between both the S3 and Swift >> proxy-server.conf"
sudo bash -c "echo # API. Meaning with s3_acl enabled S3 ACLs only effect objects and buckets >> proxy-server.conf"
sudo bash -c "echo # via the S3 API. As this ACL information wont be available via the Swift API >> proxy-server.conf"
sudo bash -c "echo # and so the ACL wont be applied. >> proxy-server.conf"
sudo bash -c "echo # Note that s3_acl currently supports only keystone and tempauth. >> proxy-server.conf"
sudo bash -c "echo # DON'T USE THIS for production before enough testing for your use cases. >> proxy-server.conf"
sudo bash -c "echo # This stuff is still under development and it might cause something >> proxy-server.conf"
sudo bash -c "echo # you don't expect. >> proxy-server.conf"
sudo bash -c "echo # s3_acl = false >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Specify a host name of your Swift cluster.  This enables virtual-hosted style >> proxy-server.conf"
sudo bash -c "echo # requests. >> proxy-server.conf"
sudo bash -c "echo # storage_domain = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Enable pipeline order check for SLO, s3token, authtoken, keystoneauth >> proxy-server.conf"
sudo bash -c "echo # according to standard s3api/Swift construction using either tempauth or >> proxy-server.conf"
sudo bash -c "echo # keystoneauth. If the order is incorrect, it raises an exception to stop >> proxy-server.conf"
sudo bash -c "echo # proxy. Turn auth_pipeline_check off only when you want to bypass these >> proxy-server.conf"
sudo bash -c "echo # authenticate middlewares in order to use other 3rd party (or your >> proxy-server.conf"
sudo bash -c "echo # proprietary) authenticate middleware. >> proxy-server.conf"
sudo bash -c "echo # auth_pipeline_check = True >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Enable multi-part uploads. (default: true) >> proxy-server.conf"
sudo bash -c "echo # This is required to store files larger than Swift's max_file_size (by >> proxy-server.conf"
sudo bash -c "echo # default, 5GiB). Note that has performance implications when deleting objects, >> proxy-server.conf"
sudo bash -c "echo # as we now have to check for whether there are also segments to delete. The >> proxy-server.conf"
sudo bash -c "echo # SLO middleware must be in the pipeline after s3api for this option to have >> proxy-server.conf"
sudo bash -c "echo # effect. >> proxy-server.conf"
sudo bash -c "echo # allow_multipart_uploads = True >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Set the maximum number of parts for Upload Part operation.(default: 1000) >> proxy-server.conf"
sudo bash -c "echo # When setting it to be larger than the default value in order to match the >> proxy-server.conf"
sudo bash -c "echo # specification of S3, set to be larger max_manifest_segments for slo >> proxy-server.conf"
sudo bash -c "echo # middleware.(specification of S3: 10000) >> proxy-server.conf"
sudo bash -c "echo # max_upload_part_num = 1000 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Enable returning only buckets which owner are the user who requested >> proxy-server.conf"
sudo bash -c "echo # GET Service operation. (default: false) >> proxy-server.conf"
sudo bash -c "echo # If you want to enable the above feature, set this and s3_acl to true. >> proxy-server.conf"
sudo bash -c "echo # That might cause significant performance degradation. So, only if your >> proxy-server.conf"
sudo bash -c "echo # service absolutely need this feature, set this setting to true. >> proxy-server.conf"
sudo bash -c "echo # If you set this to false, s3api returns all buckets. >> proxy-server.conf"
sudo bash -c "echo # check_bucket_owner = false >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # By default, Swift reports only S3 style access log. >> proxy-server.conf"
sudo bash -c "echo # (e.g. PUT /bucket/object) If set force_swift_request_proxy_log >> proxy-server.conf"
sudo bash -c "echo # to be 'true', Swift will become to output Swift style log >> proxy-server.conf"
sudo bash -c "echo # (e.g. PUT /v1/account/container/object) in addition to S3 style log. >> proxy-server.conf"
sudo bash -c "echo # Note that they will be reported twice (i.e. s3api doesn't care about >> proxy-server.conf"
sudo bash -c "echo # the duplication) and Swift style log will includes also various subrequests >> proxy-server.conf"
sudo bash -c "echo # to achieve S3 compatibilities when force_swift_request_proxy_log is set to >> proxy-server.conf"
sudo bash -c "echo # 'true' >> proxy-server.conf"
sudo bash -c "echo # force_swift_request_proxy_log = false >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # AWS S3 document says that each part must be at least 5 MB in a multipart >> proxy-server.conf"
sudo bash -c "echo # upload, except the last part. >> proxy-server.conf"
sudo bash -c "echo # min_segment_size = 5242880 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # AWS allows clock skew up to 15 mins; note that older versions of swift/swift3 >> proxy-server.conf"
sudo bash -c "echo # allowed at most 5 mins. >> proxy-server.conf"
sudo bash -c "echo # allowable_clock_skew = 900 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # CORS preflight requests don't contain enough information for us to >> proxy-server.conf"
sudo bash -c "echo # identify the account that should be used for the real request, so >> proxy-server.conf"
sudo bash -c "echo # the allowed origins must be set cluster-wide. (default: blank; all >> proxy-server.conf"
sudo bash -c "echo # preflight requests will be denied) >> proxy-server.conf"
sudo bash -c "echo # cors_preflight_allow_origin = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # AWS will return a 503 Slow Down when clients are making too many requests, >> proxy-server.conf"
sudo bash -c "echo # but that can make client logs confusing if they only log/give metrics on >> proxy-server.conf"
sudo bash -c "echo # status ints. Turn this on to return 429 instead. >> proxy-server.conf"
sudo bash -c "echo # ratelimit_as_client_error = false >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # You can override the default log routing for this filter here: >> proxy-server.conf"
sudo bash -c "echo # log_name = s3api >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:s3token] >> proxy-server.conf"
sudo bash -c "echo # s3token middleware authenticates with keystone using the s3 credentials >> proxy-server.conf"
sudo bash -c "echo # provided in the request header. Please put s3token between s3api >> proxy-server.conf"
sudo bash -c "echo # and keystoneauth if you're using keystoneauth. >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#s3token >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Prefix that will be prepended to the tenant to form the account >> proxy-server.conf"
sudo bash -c "echo reseller_prefix = AUTH_ >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # By default, s3token will reject all invalid S3-style requests. Set this to >> proxy-server.conf"
sudo bash -c "echo # True to delegate that decision to downstream WSGI components. This may be >> proxy-server.conf"
sudo bash -c "echo # useful if there are multiple auth systems in the proxy pipeline. >> proxy-server.conf"
sudo bash -c "echo delay_auth_decision = False >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Keystone server details. Note that this differs from how swift3 was >> proxy-server.conf"
sudo bash -c "echo # configured: in particular, the Keystone API version must be included. >> proxy-server.conf"
sudo bash -c "echo auth_uri = http://keystonehost:5000/v3 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Connect/read timeout to use when communicating with Keystone >> proxy-server.conf"
sudo bash -c "echo http_timeout = 10.0 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Number of seconds to cache the S3 secret. By setting this to a positive >> proxy-server.conf"
sudo bash -c "echo # number, the S3 authorization validation checks can happen locally. >> proxy-server.conf"
sudo bash -c "echo # secret_cache_duration = 0 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # If S3 secret caching is enabled, Keystone auth credentials to be used to >> proxy-server.conf"
sudo bash -c "echo # validate S3 authorization must be provided here. The appropriate options >> proxy-server.conf"
sudo bash -c "echo # are the same as used in the authtoken middleware above. The values are >> proxy-server.conf"
sudo bash -c "echo # likely the same as used in the authtoken middleware. >> proxy-server.conf"
sudo bash -c "echo # Note that the Keystone auth credentials used by s3token will need to be >> proxy-server.conf"
sudo bash -c "echo # able to view all project credentials too. >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # SSL-related options >> proxy-server.conf"
sudo bash -c "echo # insecure = False >> proxy-server.conf"
sudo bash -c "echo # certfile = >> proxy-server.conf"
sudo bash -c "echo # keyfile = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # You can override the default log routing for this filter here: >> proxy-server.conf"
sudo bash -c "echo # log_name = s3token >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Secrets may be cached to reduce latency for the client and load on Keystone. >> proxy-server.conf"
sudo bash -c "echo # Set this to some number of seconds greater than zero to enable caching. >> proxy-server.conf"
sudo bash -c "echo # secret_cache_duration = 0 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Secret caching requires Keystone credentials similar to the authtoken middleware; >> proxy-server.conf"
sudo bash -c "echo # these credentials require access to view all project credentials. >> proxy-server.conf"
sudo bash -c "echo # auth_url = http://keystonehost:5000 >> proxy-server.conf"
sudo bash -c "echo # auth_type = password >> proxy-server.conf"
sudo bash -c "echo # project_domain_id = default >> proxy-server.conf"
sudo bash -c "echo # project_name = service >> proxy-server.conf"
sudo bash -c "echo # user_domain_id = default >> proxy-server.conf"
sudo bash -c "echo # username = swift >> proxy-server.conf"
sudo bash -c "echo # password = password >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:healthcheck] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#healthcheck >> proxy-server.conf"
sudo bash -c "echo # An optional filesystem path, which if present, will cause the healthcheck >> proxy-server.conf"
sudo bash -c "echo # URL to return "503 Service Unavailable" with a body of "DISABLED BY FILE". >> proxy-server.conf"
sudo bash -c "echo # This facility may be used to temporarily remove a Swift node from a load >> proxy-server.conf"
sudo bash -c "echo # balancer pool during maintenance or upgrade (remove the file to allow the >> proxy-server.conf"
sudo bash -c "echo # node back into the load balancer pool). >> proxy-server.conf"
sudo bash -c "echo # disable_path = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:cache] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#memcache >> proxy-server.conf"
sudo bash -c "echo # You can override the default log routing for this filter here: >> proxy-server.conf"
sudo bash -c "echo # set log_name = cache >> proxy-server.conf"
sudo bash -c "echo # set log_facility = LOG_LOCAL0 >> proxy-server.conf"
sudo bash -c "echo # set log_level = INFO >> proxy-server.conf"
sudo bash -c "echo # set log_headers = false >> proxy-server.conf"
sudo bash -c "echo # set log_address = /dev/log >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # If not set here, the value for memcache_servers will be read from >> proxy-server.conf"
sudo bash -c "echo # memcache.conf (see memcache.conf-sample) or lacking that file, it will >> proxy-server.conf"
sudo bash -c "echo # default to the value below. You can specify multiple servers separated with >> proxy-server.conf"
sudo bash -c "echo # commas, as in: 10.1.2.3:11211,10.1.2.4:11211 (IPv6 addresses must >> proxy-server.conf"
sudo bash -c "echo # follow rfc3986 section-3.2.2, i.e. [::1]:11211) >> proxy-server.conf"
sudo bash -c "echo # memcache_servers = 127.0.0.1:11211 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Sets how memcache values are serialized and deserialized: >> proxy-server.conf"
sudo bash -c "echo # 0 = older, insecure pickle serialization >> proxy-server.conf"
sudo bash -c "echo # 1 = json serialization but pickles can still be read (still insecure) >> proxy-server.conf"
sudo bash -c "echo # 2 = json serialization only (secure and the default) >> proxy-server.conf"
sudo bash -c "echo # If not set here, the value for memcache_serialization_support will be read >> proxy-server.conf"
sudo bash -c "echo # from /etc/swift/memcache.conf (see memcache.conf-sample). >> proxy-server.conf"
sudo bash -c "echo # To avoid an instant full cache flush, existing installations should >> proxy-server.conf"
sudo bash -c "echo # upgrade with 0, then set to 1 and reload, then after some time (24 hours) >> proxy-server.conf"
sudo bash -c "echo # set to 2 and reload. >> proxy-server.conf"
sudo bash -c "echo # In the future, the ability to use pickle serialization will be removed. >> proxy-server.conf"
sudo bash -c "echo # memcache_serialization_support = 2 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Sets the maximum number of connections to each memcached server per worker >> proxy-server.conf"
sudo bash -c "echo # memcache_max_connections = 2 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # How long without an error before a server's error count is reset. This will >> proxy-server.conf"
sudo bash -c "echo # also be how long before a server is reenabled after suppression is triggered. >> proxy-server.conf"
sudo bash -c "echo # Set to 0 to disable error-limiting. >> proxy-server.conf"
sudo bash -c "echo # error_suppression_interval = 60.0 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # How many errors can accumulate before a server is temporarily ignored. >> proxy-server.conf"
sudo bash -c "echo # error_suppression_limit = 10 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # (Optional) Global toggle for TLS usage when comunicating with >> proxy-server.conf"
sudo bash -c "echo # the caching servers. >> proxy-server.conf"
sudo bash -c "echo # tls_enabled = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # More options documented in memcache.conf-sample >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:ratelimit] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#ratelimit >> proxy-server.conf"
sudo bash -c "echo # You can override the default log routing for this filter here: >> proxy-server.conf"
sudo bash -c "echo # set log_name = ratelimit >> proxy-server.conf"
sudo bash -c "echo # set log_facility = LOG_LOCAL0 >> proxy-server.conf"
sudo bash -c "echo # set log_level = INFO >> proxy-server.conf"
sudo bash -c "echo # set log_headers = false >> proxy-server.conf"
sudo bash -c "echo # set log_address = /dev/log >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # clock_accuracy should represent how accurate the proxy servers' system clocks >> proxy-server.conf"
sudo bash -c "echo # are with each other. 1000 means that all the proxies' clock are accurate to >> proxy-server.conf"
sudo bash -c "echo # each other within 1 millisecond.  No ratelimit should be higher than the >> proxy-server.conf"
sudo bash -c "echo # clock accuracy. >> proxy-server.conf"
sudo bash -c "echo # clock_accuracy = 1000 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # max_sleep_time_seconds = 60 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # log_sleep_time_seconds of 0 means disabled >> proxy-server.conf"
sudo bash -c "echo # log_sleep_time_seconds = 0 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # allows for slow rates (e.g. running up to 5 sec's behind) to catch up. >> proxy-server.conf"
sudo bash -c "echo # rate_buffer_seconds = 5 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # account_ratelimit of 0 means disabled >> proxy-server.conf"
sudo bash -c "echo # account_ratelimit = 0 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # DEPRECATED- these will continue to work but will be replaced >> proxy-server.conf"
sudo bash -c "echo # by the X-Account-Sysmeta-Global-Write-Ratelimit flag. >> proxy-server.conf"
sudo bash -c "echo # Please see ratelimiting docs for details. >> proxy-server.conf"
sudo bash -c "echo # these are comma separated lists of account names >> proxy-server.conf"
sudo bash -c "echo # account_whitelist = a,b >> proxy-server.conf"
sudo bash -c "echo # account_blacklist = c,d >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # with container_limit_x = r >> proxy-server.conf"
sudo bash -c "echo # for containers of size x limit write requests per second to r.  The container >> proxy-server.conf"
sudo bash -c "echo # rate will be linearly interpolated from the values given. With the values >> proxy-server.conf"
sudo bash -c "echo # below, a container of size 5 will get a rate of 75. >> proxy-server.conf"
sudo bash -c "echo # container_ratelimit_0 = 100 >> proxy-server.conf"
sudo bash -c "echo # container_ratelimit_10 = 50 >> proxy-server.conf"
sudo bash -c "echo # container_ratelimit_50 = 20 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Similarly to the above container-level write limits, the following will limit >> proxy-server.conf"
sudo bash -c "echo # container GET (listing) requests. >> proxy-server.conf"
sudo bash -c "echo # container_listing_ratelimit_0 = 100 >> proxy-server.conf"
sudo bash -c "echo # container_listing_ratelimit_10 = 50 >> proxy-server.conf"
sudo bash -c "echo # container_listing_ratelimit_50 = 20 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:read_only] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#read_only >> proxy-server.conf"
sudo bash -c "echo # read_only set to true means turn global read only on >> proxy-server.conf"
sudo bash -c "echo # read_only = false >> proxy-server.conf"
sudo bash -c "echo # allow_deletes set to true means to allow deletes >> proxy-server.conf"
sudo bash -c "echo # allow_deletes = false >> proxy-server.conf"
sudo bash -c "echo # Note: Put after ratelimit in the pipeline. >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: needs to be placed before listing_formats; >> proxy-server.conf"
sudo bash -c "echo # otherwise remapped listings will always be JSON >> proxy-server.conf"
sudo bash -c "echo [filter:domain_remap] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#domain_remap >> proxy-server.conf"
sudo bash -c "echo # You can override the default log routing for this filter here: >> proxy-server.conf"
sudo bash -c "echo # set log_name = domain_remap >> proxy-server.conf"
sudo bash -c "echo # set log_facility = LOG_LOCAL0 >> proxy-server.conf"
sudo bash -c "echo # set log_level = INFO >> proxy-server.conf"
sudo bash -c "echo # set log_headers = false >> proxy-server.conf"
sudo bash -c "echo # set log_address = /dev/log >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Specify the storage_domain that match your cloud, multiple domains >> proxy-server.conf"
sudo bash -c "echo # can be specified separated by a comma >> proxy-server.conf"
sudo bash -c "echo # storage_domain = example.com >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Specify a root path part that will be added to the start of paths if not >> proxy-server.conf"
sudo bash -c "echo # already present. >> proxy-server.conf"
sudo bash -c "echo # path_root = v1 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Browsers can convert a host header to lowercase, so check that reseller >> proxy-server.conf"
sudo bash -c "echo # prefix on the account is the correct case. This is done by comparing the >> proxy-server.conf"
sudo bash -c "echo # items in the reseller_prefixes config option to the found prefix. If they >> proxy-server.conf"
sudo bash -c "echo # match except for case, the item from reseller_prefixes will be used >> proxy-server.conf"
sudo bash -c "echo # instead of the found reseller prefix. When none match, the default reseller >> proxy-server.conf"
sudo bash -c "echo # prefix is used. When no default reseller prefix is configured, any request >> proxy-server.conf"
sudo bash -c "echo # with an account prefix not in that list will be ignored by this middleware. >> proxy-server.conf"
sudo bash -c "echo # reseller_prefixes = AUTH >> proxy-server.conf"
sudo bash -c "echo # default_reseller_prefix = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Enable legacy remapping behavior for versioned path requests: >> proxy-server.conf"
sudo bash -c "echo #   c.a.example.com/v1/o -> /v1/AUTH_a/c/o >> proxy-server.conf"
sudo bash -c "echo # instead of >> proxy-server.conf"
sudo bash -c "echo #   c.a.example.com/v1/o -> /v1/AUTH_a/c/v1/o >> proxy-server.conf"
sudo bash -c "echo # ... by default all path parts after a remapped domain are considered part of >> proxy-server.conf"
sudo bash -c "echo # the object name with no special case for the path "v1" >> proxy-server.conf"
sudo bash -c "echo # mangle_client_paths = False >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:catch_errors] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#catch_errors >> proxy-server.conf"
sudo bash -c "echo # You can override the default log routing for this filter here: >> proxy-server.conf"
sudo bash -c "echo # set log_name = catch_errors >> proxy-server.conf"
sudo bash -c "echo # set log_facility = LOG_LOCAL0 >> proxy-server.conf"
sudo bash -c "echo # set log_level = INFO >> proxy-server.conf"
sudo bash -c "echo # set log_headers = false >> proxy-server.conf"
sudo bash -c "echo # set log_address = /dev/log >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:cname_lookup] >> proxy-server.conf"
sudo bash -c "echo # Note: this middleware requires python-dnspython >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#cname_lookup >> proxy-server.conf"
sudo bash -c "echo # You can override the default log routing for this filter here: >> proxy-server.conf"
sudo bash -c "echo # set log_name = cname_lookup >> proxy-server.conf"
sudo bash -c "echo # set log_facility = LOG_LOCAL0 >> proxy-server.conf"
sudo bash -c "echo # set log_level = INFO >> proxy-server.conf"
sudo bash -c "echo # set log_headers = false >> proxy-server.conf"
sudo bash -c "echo # set log_address = /dev/log >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Specify the storage_domain that match your cloud, multiple domains >> proxy-server.conf"
sudo bash -c "echo # can be specified separated by a comma >> proxy-server.conf"
sudo bash -c "echo # storage_domain = example.com >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # lookup_depth = 1 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Specify the nameservers to use to do the CNAME resolution. If unset, the >> proxy-server.conf"
sudo bash -c "echo # system configuration is used. Multiple nameservers can be specified >> proxy-server.conf"
sudo bash -c "echo # separated by a comma. Default port 53 can be overridden. IPv6 is accepted. >> proxy-server.conf"
sudo bash -c "echo # Example: 127.0.0.1, 127.0.0.2, 127.0.0.3:5353, [::1], [::1]:5353 >> proxy-server.conf"
sudo bash -c "echo # nameservers = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put staticweb just after your auth filter(s) in the pipeline >> proxy-server.conf"
sudo bash -c "echo [filter:staticweb] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#staticweb >> proxy-server.conf"
sudo bash -c "echo # You can override the default log routing for this filter here: >> proxy-server.conf"
sudo bash -c "echo # set log_name = staticweb >> proxy-server.conf"
sudo bash -c "echo # set log_facility = LOG_LOCAL0 >> proxy-server.conf"
sudo bash -c "echo # set log_level = INFO >> proxy-server.conf"
sudo bash -c "echo # set log_headers = false >> proxy-server.conf"
sudo bash -c "echo # set log_address = /dev/log >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # At times when it's impossible for staticweb to guess the outside >> proxy-server.conf"
sudo bash -c "echo # endpoint correctly, the url_base may be used to supply the URL >> proxy-server.conf"
sudo bash -c "echo # scheme and/or the host name (and port number) in order to generate >> proxy-server.conf"
sudo bash -c "echo # redirects. >> proxy-server.conf"
sudo bash -c "echo # Example values: >> proxy-server.conf"
sudo bash -c "echo #    http://www.example.com    - redirect to www.example.com >> proxy-server.conf"
sudo bash -c "echo #    https:                    - changes the schema only >> proxy-server.conf"
sudo bash -c "echo #    https://                  - same, changes the schema only >> proxy-server.conf"
sudo bash -c "echo #    //www.example.com:8080    - redirect www.example.com on port 8080 >> proxy-server.conf"
sudo bash -c "echo #                                (schema unchanged) >> proxy-server.conf"
sudo bash -c "echo # url_base = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put tempurl before dlo, slo and your auth filter(s) in the pipeline >> proxy-server.conf"
sudo bash -c "echo [filter:tempurl] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#tempurl >> proxy-server.conf"
sudo bash -c "echo # The methods allowed with Temp URLs. >> proxy-server.conf"
sudo bash -c "echo # methods = GET HEAD PUT POST DELETE >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The headers to remove from incoming requests. Simply a whitespace delimited >> proxy-server.conf"
sudo bash -c "echo # list of header names and names can optionally end with '*' to indicate a >> proxy-server.conf"
sudo bash -c "echo # prefix match. incoming_allow_headers is a list of exceptions to these >> proxy-server.conf"
sudo bash -c "echo # removals. >> proxy-server.conf"
sudo bash -c "echo # incoming_remove_headers = x-timestamp >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The headers allowed as exceptions to incoming_remove_headers. Simply a >> proxy-server.conf"
sudo bash -c "echo # whitespace delimited list of header names and names can optionally end with >> proxy-server.conf"
sudo bash -c "echo # '*' to indicate a prefix match. >> proxy-server.conf"
sudo bash -c "echo # incoming_allow_headers = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The headers to remove from outgoing responses. Simply a whitespace delimited >> proxy-server.conf"
sudo bash -c "echo # list of header names and names can optionally end with '*' to indicate a >> proxy-server.conf"
sudo bash -c "echo # prefix match. outgoing_allow_headers is a list of exceptions to these >> proxy-server.conf"
sudo bash -c "echo # removals. >> proxy-server.conf"
sudo bash -c "echo # outgoing_remove_headers = x-object-meta-* >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The headers allowed as exceptions to outgoing_remove_headers. Simply a >> proxy-server.conf"
sudo bash -c "echo # whitespace delimited list of header names and names can optionally end with >> proxy-server.conf"
sudo bash -c "echo # '*' to indicate a prefix match. >> proxy-server.conf"
sudo bash -c "echo # outgoing_allow_headers = x-object-meta-public-* >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The digest algorithm(s) supported for generating signatures; >> proxy-server.conf"
sudo bash -c "echo # whitespace-delimited. >> proxy-server.conf"
sudo bash -c "echo # allowed_digests = sha1 sha256 sha512 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put formpost just before your auth filter(s) in the pipeline >> proxy-server.conf"
sudo bash -c "echo [filter:formpost] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#formpost >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Just needs to be placed before the proxy-server in the pipeline. >> proxy-server.conf"
sudo bash -c "echo [filter:name_check] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#name_check >> proxy-server.conf"
sudo bash -c "echo # forbidden_chars = '"`<> >> proxy-server.conf"
sudo bash -c "echo # maximum_length = 255 >> proxy-server.conf"
sudo bash -c "echo # forbidden_regexp = /\./|/\.\./|/\.$|/\.\.$ >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Etag quoter should be placed just after cache in the pipeline. >> proxy-server.conf"
sudo bash -c "echo [filter:etag-quoter] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#etag_quoter >> proxy-server.conf"
sudo bash -c "echo # Historically, Swift has emitted bare MD5 hex digests as ETags, which is not >> proxy-server.conf"
sudo bash -c "echo # RFC compliant. With this middleware in the pipeline, users can opt-in to >> proxy-server.conf"
sudo bash -c "echo # RFC-compliant ETags on a per-account or per-container basis. >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Set to true to enable RFC-compliant ETags cluster-wide by default. Users >> proxy-server.conf"
sudo bash -c "echo # can still opt-out by setting appropriate account or container metadata. >> proxy-server.conf"
sudo bash -c "echo # enable_by_default = false >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:list-endpoints] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#list_endpoints >> proxy-server.conf"
sudo bash -c "echo # list_endpoints_path = /endpoints/ >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:proxy-logging] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#proxy_logging >> proxy-server.conf"
sudo bash -c "echo # If not set, logging directives from [DEFAULT] without "access_" will be used >> proxy-server.conf"
sudo bash -c "echo # access_log_name = swift >> proxy-server.conf"
sudo bash -c "echo # access_log_facility = LOG_LOCAL0 >> proxy-server.conf"
sudo bash -c "echo # access_log_level = INFO >> proxy-server.conf"
sudo bash -c "echo # access_log_address = /dev/log >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Log route for this filter. Useful if you want to have different configs for >> proxy-server.conf"
sudo bash -c "echo # the two proxy-logging filters. >> proxy-server.conf"
sudo bash -c "echo # access_log_route = proxy-server >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # If set, access_log_udp_host will override access_log_address >> proxy-server.conf"
sudo bash -c "echo # access_log_udp_host = >> proxy-server.conf"
sudo bash -c "echo # access_log_udp_port = 514 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # You can use log_statsd_* from [DEFAULT] or override them here: >> proxy-server.conf"
sudo bash -c "echo # access_log_statsd_host = >> proxy-server.conf"
sudo bash -c "echo # access_log_statsd_port = 8125 >> proxy-server.conf"
sudo bash -c "echo # access_log_statsd_default_sample_rate = 1.0 >> proxy-server.conf"
sudo bash -c "echo # access_log_statsd_sample_rate_factor = 1.0 >> proxy-server.conf"
sudo bash -c "echo # access_log_statsd_metric_prefix = >> proxy-server.conf"
sudo bash -c "echo # access_log_headers = false >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # If access_log_headers is True and access_log_headers_only is set only >> proxy-server.conf"
sudo bash -c "echo # these headers are logged. Multiple headers can be defined as comma separated >> proxy-server.conf"
sudo bash -c "echo # list like this: access_log_headers_only = Host, X-Object-Meta-Mtime >> proxy-server.conf"
sudo bash -c "echo # access_log_headers_only = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # By default, the X-Auth-Token is logged. To obscure the value, >> proxy-server.conf"
sudo bash -c "echo # set reveal_sensitive_prefix to the number of characters to log. >> proxy-server.conf"
sudo bash -c "echo # For example, if set to 12, only the first 12 characters of the >> proxy-server.conf"
sudo bash -c "echo # token appear in the log. An unauthorized access of the log file >> proxy-server.conf"
sudo bash -c "echo # won't allow unauthorized usage of the token. However, the first >> proxy-server.conf"
sudo bash -c "echo # 12 or so characters is unique enough that you can trace/debug >> proxy-server.conf"
sudo bash -c "echo # token usage. Set to 0 to suppress the token completely (replaced >> proxy-server.conf"
sudo bash -c "echo # by '...' in the log). >> proxy-server.conf"
sudo bash -c "echo # Note: reveal_sensitive_prefix will not affect the value >> proxy-server.conf"
sudo bash -c "echo # logged with access_log_headers=True. >> proxy-server.conf"
sudo bash -c "echo # reveal_sensitive_prefix = 16 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # What HTTP methods are allowed for StatsD logging (comma-sep); request methods >> proxy-server.conf"
sudo bash -c "echo # not in this list will have "BAD_METHOD" for the <verb> portion of the metric. >> proxy-server.conf"
sudo bash -c "echo # log_statsd_valid_http_methods = GET,HEAD,POST,PUT,DELETE,COPY,OPTIONS >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Note: The double proxy-logging in the pipeline is not a mistake. The >> proxy-server.conf"
sudo bash -c "echo # left-most proxy-logging is there to log requests that were handled in >> proxy-server.conf"
sudo bash -c "echo # middleware and never made it through to the right-most middleware (and >> proxy-server.conf"
sudo bash -c "echo # proxy server). Double logging is prevented for normal requests. See >> proxy-server.conf"
sudo bash -c "echo # proxy-logging docs. >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Hashing algorithm for log anonymization. Must be one of algorithms supported >> proxy-server.conf"
sudo bash -c "echo # by Python's hashlib. >> proxy-server.conf"
sudo bash -c "echo # log_anonymization_method = MD5 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Salt added during log anonymization >> proxy-server.conf"
sudo bash -c "echo # log_anonymization_salt = >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Template used to format access logs. All words surrounded by curly brackets >> proxy-server.conf"
sudo bash -c "echo # will be substituted with the appropriate values >> proxy-server.conf"
sudo bash -c "echo # log_msg_template = {client_ip} {remote_addr} {end_time.datetime} {method} {path} {protocol} {status_int} {referer} {user_agent} {auth_token} {bytes_recvd} {bytes_sent} {client_etag} {transaction_id} {headers} {request_time} {source} {log_info} {start_time} {end_time} {policy_index} >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put before both ratelimit and auth in the pipeline. >> proxy-server.conf"
sudo bash -c "echo [filter:bulk] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#bulk >> proxy-server.conf"
sudo bash -c "echo # max_containers_per_extraction = 10000 >> proxy-server.conf"
sudo bash -c "echo # max_failed_extractions = 1000 >> proxy-server.conf"
sudo bash -c "echo # max_deletes_per_request = 10000 >> proxy-server.conf"
sudo bash -c "echo # max_failed_deletes = 1000 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # In order to keep a connection active during a potentially long bulk request, >> proxy-server.conf"
sudo bash -c "echo # Swift may return whitespace prepended to the actual response body. This >> proxy-server.conf"
sudo bash -c "echo # whitespace will be yielded no more than every yield_frequency seconds. >> proxy-server.conf"
sudo bash -c "echo # yield_frequency = 10 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Note: The following parameter is used during a bulk delete of objects and >> proxy-server.conf"
sudo bash -c "echo # their container. This would frequently fail because it is very likely >> proxy-server.conf"
sudo bash -c "echo # that all replicated objects have not been deleted by the time the middleware got a >> proxy-server.conf"
sudo bash -c "echo # successful response. It can be configured the number of retries. And the >> proxy-server.conf"
sudo bash -c "echo # number of seconds to wait between each retry will be 1.5**retry >> proxy-server.conf"
sudo bash -c "echo # delete_container_retry_count = 0 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # To speed up the bulk delete process, multiple deletes may be executed in >> proxy-server.conf"
sudo bash -c "echo # parallel. Avoid setting this too high, as it gives clients a force multiplier >> proxy-server.conf"
sudo bash -c "echo # which may be used in DoS attacks. The suggested range is between 2 and 10. >> proxy-server.conf"
sudo bash -c "echo # delete_concurrency = 2 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put after auth and staticweb in the pipeline. >> proxy-server.conf"
sudo bash -c "echo [filter:slo] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#slo >> proxy-server.conf"
sudo bash -c "echo # max_manifest_segments = 1000 >> proxy-server.conf"
sudo bash -c "echo # max_manifest_size = 8388608 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Rate limiting applies only to segments smaller than this size (bytes). >> proxy-server.conf"
sudo bash -c "echo # rate_limit_under_size = 1048576 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Start rate-limiting SLO segment serving after the Nth small segment of a >> proxy-server.conf"
sudo bash -c "echo # segmented object. >> proxy-server.conf"
sudo bash -c "echo # rate_limit_after_segment = 10 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Once segment rate-limiting kicks in for an object, limit segments served >> proxy-server.conf"
sudo bash -c "echo # to N per second. 0 means no rate-limiting. >> proxy-server.conf"
sudo bash -c "echo # rate_limit_segments_per_sec = 1 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Time limit on GET requests (seconds) >> proxy-server.conf"
sudo bash -c "echo # max_get_time = 86400 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # When creating an SLO, multiple segment validations may be executed in >> proxy-server.conf"
sudo bash -c "echo # parallel. Further, multiple deletes may be executed in parallel when deleting >> proxy-server.conf"
sudo bash -c "echo # with ?multipart-manifest=delete. Use this setting to limit how many >> proxy-server.conf"
sudo bash -c "echo # subrequests may be executed concurrently. Avoid setting it too high, as it >> proxy-server.conf"
sudo bash -c "echo # gives clients a force multiplier which may be used in DoS attacks. The >> proxy-server.conf"
sudo bash -c "echo # suggested range is between 2 and 10. >> proxy-server.conf"
sudo bash -c "echo # concurrency = 2 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # This may be used to separately tune validation and delete concurrency values. >> proxy-server.conf"
sudo bash -c "echo # Default is to use the concurrency value from above; all of the same caveats >> proxy-server.conf"
sudo bash -c "echo # apply regarding recommended ranges. >> proxy-server.conf"
sudo bash -c "echo # delete_concurrency = 2 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # In order to keep a connection active during a potentially long PUT request, >> proxy-server.conf"
sudo bash -c "echo # clients may request that Swift send whitespace ahead of the final response >> proxy-server.conf"
sudo bash -c "echo # body. This whitespace will be yielded at most every yield_frequency seconds. >> proxy-server.conf"
sudo bash -c "echo # yield_frequency = 10 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Since SLOs may have thousands of segments, clients may request that the >> proxy-server.conf"
sudo bash -c "echo # object-expirer handle the deletion of segments using query params like >> proxy-server.conf"
sudo bash -c "echo # `?multipart-manifest=delete&async=on`. You may want to keep this off if it >> proxy-server.conf"
sudo bash -c "echo # negatively impacts your expirers; in that case, the deletes will still >> proxy-server.conf"
sudo bash -c "echo # be done as part of the client request. >> proxy-server.conf"
sudo bash -c "echo # allow_async_delete = false >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put after auth and staticweb in the pipeline. >> proxy-server.conf"
sudo bash -c "echo # If you don't put it in the pipeline, it will be inserted for you. >> proxy-server.conf"
sudo bash -c "echo [filter:dlo] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#dlo >> proxy-server.conf"
sudo bash -c "echo # Start rate-limiting DLO segment serving after the Nth segment of a >> proxy-server.conf"
sudo bash -c "echo # segmented object. >> proxy-server.conf"
sudo bash -c "echo # rate_limit_after_segment = 10 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Once segment rate-limiting kicks in for an object, limit segments served >> proxy-server.conf"
sudo bash -c "echo # to N per second. 0 means no rate-limiting. >> proxy-server.conf"
sudo bash -c "echo # rate_limit_segments_per_sec = 1 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Time limit on GET requests (seconds) >> proxy-server.conf"
sudo bash -c "echo # max_get_time = 86400 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put after auth in the pipeline. >> proxy-server.conf"
sudo bash -c "echo [filter:container-quotas] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#container_quotas >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put after auth in the pipeline. >> proxy-server.conf"
sudo bash -c "echo [filter:account-quotas] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#account_quotas >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:gatekeeper] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#gatekeeper >> proxy-server.conf"
sudo bash -c "echo # Set this to false if you want to allow clients to set arbitrary X-Timestamps >> proxy-server.conf"
sudo bash -c "echo # on uploaded objects. This may be used to preserve timestamps when migrating >> proxy-server.conf"
sudo bash -c "echo # from a previous storage system, but risks allowing users to upload >> proxy-server.conf"
sudo bash -c "echo # difficult-to-delete data. >> proxy-server.conf"
sudo bash -c "echo # shunt_inbound_x_timestamp = true >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Set this to true if you want to allow clients to access and manipulate the >> proxy-server.conf"
sudo bash -c "echo # (normally internal-to-swift) null namespace by including a header like >> proxy-server.conf"
sudo bash -c "echo #    X-Allow-Reserved-Names: true >> proxy-server.conf"
sudo bash -c "echo # allow_reserved_names_header = false >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # You can override the default log routing for this filter here: >> proxy-server.conf"
sudo bash -c "echo # set log_name = gatekeeper >> proxy-server.conf"
sudo bash -c "echo # set log_facility = LOG_LOCAL0 >> proxy-server.conf"
sudo bash -c "echo # set log_level = INFO >> proxy-server.conf"
sudo bash -c "echo # set log_headers = false >> proxy-server.conf"
sudo bash -c "echo # set log_address = /dev/log >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:container_sync] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#container_sync >> proxy-server.conf"
sudo bash -c "echo # Set this to false if you want to disallow any full URL values to be set for >> proxy-server.conf"
sudo bash -c "echo # any new X-Container-Sync-To headers. This will keep any new full URLs from >> proxy-server.conf"
sudo bash -c "echo # coming in, but won't change any existing values already in the cluster. >> proxy-server.conf"
sudo bash -c "echo # Updating those will have to be done manually, as knowing what the true realm >> proxy-server.conf"
sudo bash -c "echo # endpoint should be cannot always be guessed. >> proxy-server.conf"
sudo bash -c "echo # allow_full_urls = true >> proxy-server.conf"
sudo bash -c "echo # Set this to specify this clusters //realm/cluster as "current" in /info >> proxy-server.conf"
sudo bash -c "echo # current = //REALM/CLUSTER >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put it at the beginning of the pipeline to profile all middleware. But >> proxy-server.conf"
sudo bash -c "echo # it is safer to put this after catch_errors, gatekeeper and healthcheck. >> proxy-server.conf"
sudo bash -c "echo [filter:xprofile] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#xprofile >> proxy-server.conf"
sudo bash -c "echo # This option enable you to switch profilers which should inherit from python >> proxy-server.conf"
sudo bash -c "echo # standard profiler. Currently the supported value can be 'cProfile', >> proxy-server.conf"
sudo bash -c "echo # 'eventlet.green.profile' etc. >> proxy-server.conf"
sudo bash -c "echo # profile_module = eventlet.green.profile >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # This prefix will be used to combine process ID and timestamp to name the >> proxy-server.conf"
sudo bash -c "echo # profile data file.  Make sure the executing user has permission to write >> proxy-server.conf"
sudo bash -c "echo # into this path (missing path segments will be created, if necessary). >> proxy-server.conf"
sudo bash -c "echo # If you enable profiling in more than one type of daemon, you must override >> proxy-server.conf"
sudo bash -c "echo # it with an unique value like: /var/log/swift/profile/proxy.profile >> proxy-server.conf"
sudo bash -c "echo # log_filename_prefix = /tmp/log/swift/profile/default.profile >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # the profile data will be dumped to local disk based on above naming rule >> proxy-server.conf"
sudo bash -c "echo # in this interval. >> proxy-server.conf"
sudo bash -c "echo # dump_interval = 5.0 >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Be careful, this option will enable profiler to dump data into the file with >> proxy-server.conf"
sudo bash -c "echo # time stamp which means there will be lots of files piled up in the directory. >> proxy-server.conf"
sudo bash -c "echo # dump_timestamp = false >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # This is the path of the URL to access the mini web UI. >> proxy-server.conf"
sudo bash -c "echo # path = /__profile__ >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # Clear the data when the wsgi server shutdown. >> proxy-server.conf"
sudo bash -c "echo # flush_at_shutdown = false >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # unwind the iterator of applications >> proxy-server.conf"
sudo bash -c "echo # unwind = false >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put after slo, dlo in the pipeline. >> proxy-server.conf"
sudo bash -c "echo # If you don't put it in the pipeline, it will be inserted automatically. >> proxy-server.conf"
sudo bash -c "echo [filter:versioned_writes] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#versioned_writes >> proxy-server.conf"
sudo bash -c "echo # Enables using versioned writes middleware and exposing configuration >> proxy-server.conf"
sudo bash -c "echo # settings via HTTP GET /info. >> proxy-server.conf"
sudo bash -c "echo # WARNING: Setting this option bypasses the "allow_versions" option >> proxy-server.conf"
sudo bash -c "echo # in the container configuration file, which will be eventually >> proxy-server.conf"
sudo bash -c "echo # deprecated. See documentation for more details. >> proxy-server.conf"
sudo bash -c "echo # allow_versioned_writes = false >> proxy-server.conf"
sudo bash -c "echo # Enables Swift object-versioning API >> proxy-server.conf"
sudo bash -c "echo # allow_object_versioning = false >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put after auth and before dlo and slo middlewares. >> proxy-server.conf"
sudo bash -c "echo # If you don't put it in the pipeline, it will be inserted for you. >> proxy-server.conf"
sudo bash -c "echo [filter:copy] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#copy >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: To enable encryption, add the following 2 dependent pieces of crypto >> proxy-server.conf"
sudo bash -c "echo # middleware to the proxy-server pipeline. They should be to the right of all >> proxy-server.conf"
sudo bash -c "echo # other middleware apart from the final proxy-logging middleware, and in the >> proxy-server.conf"
sudo bash -c "echo # order shown in this example: >> proxy-server.conf"
sudo bash -c "echo # <other middleware> keymaster encryption proxy-logging proxy-server >> proxy-server.conf"
sudo bash -c "echo [filter:keymaster] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#keymaster >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Over time, the format of crypto metadata on disk may change slightly to resolve >> proxy-server.conf"
sudo bash -c "echo # ambiguities. In general, you want to be writing the newest version, but to >> proxy-server.conf"
sudo bash -c "echo # ensure that all writes can still be read during rolling upgrades, there's the >> proxy-server.conf"
sudo bash -c "echo # option to write older formats as well. >> proxy-server.conf"
sudo bash -c "echo # Before upgrading from Swift 2.20.0 or Swift 2.19.1 or earlier, ensure this is set to 1 >> proxy-server.conf"
sudo bash -c "echo # Before upgrading from Swift 2.25.0 or earlier, ensure this is set to at most 2 >> proxy-server.conf"
sudo bash -c "echo # After upgrading all proxy servers, set this to 3 (currently the highest version) >> proxy-server.conf"
sudo bash -c "echo # >> proxy-server.conf"
sudo bash -c "echo # The default is currently 2 to support upgrades with no configuration changes, >> proxy-server.conf"
sudo bash -c "echo # but may change to 3 in the future. >> proxy-server.conf"
sudo bash -c "echo meta_version_to_write = 2 >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Sets the root secret from which encryption keys are derived. This must be set >> proxy-server.conf"
sudo bash -c "echo # before first use to a value that is a base64 encoding of at least 32 bytes. >> proxy-server.conf"
sudo bash -c "echo # The security of all encrypted data critically depends on this key, therefore >> proxy-server.conf"
sudo bash -c "echo # it should be set to a high-entropy value. For example, a suitable value may >> proxy-server.conf"
sudo bash -c "echo # be obtained by base-64 encoding a 32 byte (or longer) value generated by a >> proxy-server.conf"
sudo bash -c "echo # cryptographically secure random number generator. Changing the root secret is >> proxy-server.conf"
sudo bash -c "echo # likely to result in data loss. >> proxy-server.conf"
sudo bash -c "echo encryption_root_secret = changeme >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Multiple root secrets may be configured using options named >> proxy-server.conf"
sudo bash -c "echo # 'encryption_root_secret_<secret_id>' where 'secret_id' is a unique >> proxy-server.conf"
sudo bash -c "echo # identifier. This enables the root secret to be changed from time to time. >> proxy-server.conf"
sudo bash -c "echo # Only one root secret is used for object PUTs or POSTs at any moment in time. >> proxy-server.conf"
sudo bash -c "echo # This is specified by the 'active_root_secret_id' option. If >> proxy-server.conf"
sudo bash -c "echo # 'active_root_secret_id' is not specified then the root secret specified by >> proxy-server.conf"
sudo bash -c "echo # 'encryption_root_secret' is considered to be the default. Once a root secret >> proxy-server.conf"
sudo bash -c "echo # has been used as the default root secret it must remain in the config file in >> proxy-server.conf"
sudo bash -c "echo # order that any objects that were encrypted with it may be subsequently >> proxy-server.conf"
sudo bash -c "echo # decrypted. The secret_id used to identify the key cannot change. >> proxy-server.conf"
sudo bash -c "echo # encryption_root_secret_myid = changeme >> proxy-server.conf"
sudo bash -c "echo # active_root_secret_id = myid >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Sets the path from which the keymaster config options should be read. This >> proxy-server.conf"
sudo bash -c "echo # allows multiple processes which need to be encryption-aware (for example, >> proxy-server.conf"
sudo bash -c "echo # proxy-server and container-sync) to share the same config file, ensuring >> proxy-server.conf"
sudo bash -c "echo # that the encryption keys used are the same. The format expected is similar >> proxy-server.conf"
sudo bash -c "echo # to other config files, with a single [keymaster] section and a single >> proxy-server.conf"
sudo bash -c "echo # encryption_root_secret option. If this option is set, the root secret >> proxy-server.conf"
sudo bash -c "echo # MUST NOT be set in proxy-server.conf. >> proxy-server.conf"
sudo bash -c "echo # keymaster_config_path = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # To store the encryption root secret in a remote key management system (KMS) >> proxy-server.conf"
sudo bash -c "echo # such as Barbican, replace the keymaster middleware with the kms_keymaster >> proxy-server.conf"
sudo bash -c "echo # middleware in the proxy-server pipeline. They should be to the right of all >> proxy-server.conf"
sudo bash -c "echo # other middleware apart from the final proxy-logging middleware, and in the >> proxy-server.conf"
sudo bash -c "echo # order shown in this example: >> proxy-server.conf"
sudo bash -c "echo # <other middleware> kms_keymaster encryption proxy-logging proxy-server >> proxy-server.conf"
sudo bash -c "echo [filter:kms_keymaster] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#kms_keymaster >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Sets the path from which the keymaster config options should be read. This >> proxy-server.conf"
sudo bash -c "echo # allows multiple processes which need to be encryption-aware (for example, >> proxy-server.conf"
sudo bash -c "echo # proxy-server and container-sync) to share the same config file, ensuring >> proxy-server.conf"
sudo bash -c "echo # that the encryption keys used are the same. The format expected is similar >> proxy-server.conf"
sudo bash -c "echo # to other config files, with a single [kms_keymaster] section. See the >> proxy-server.conf"
sudo bash -c "echo # keymaster.conf-sample file for details on the kms_keymaster configuration >> proxy-server.conf"
sudo bash -c "echo # options. >> proxy-server.conf"
sudo bash -c "echo # keymaster_config_path = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # kmip_keymaster middleware may be used to fetch an encryption root secret from >> proxy-server.conf"
sudo bash -c "echo # a KMIP service. It should replace, in the same position, any other keymaster >> proxy-server.conf"
sudo bash -c "echo # middleware in the proxy-server pipeline, so that the middleware order is as >> proxy-server.conf"
sudo bash -c "echo # shown in this example: >> proxy-server.conf"
sudo bash -c "echo # <other middleware> kmip_keymaster encryption proxy-logging proxy-server >> proxy-server.conf"
sudo bash -c "echo [filter:kmip_keymaster] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#kmip_keymaster >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Sets the path from which the keymaster config options should be read. This >> proxy-server.conf"
sudo bash -c "echo # allows multiple processes which need to be encryption-aware (for example, >> proxy-server.conf"
sudo bash -c "echo # proxy-server and container-sync) to share the same config file, ensuring >> proxy-server.conf"
sudo bash -c "echo # that the encryption keys used are the same. As an added benefit the >> proxy-server.conf"
sudo bash -c "echo # keymaster configuration file can have different permissions than the >> proxy-server.conf"
sudo bash -c "echo # `proxy-server.conf` file. The format expected is similar >> proxy-server.conf"
sudo bash -c "echo # to other config files, with a single [kmip_keymaster] section. See the >> proxy-server.conf"
sudo bash -c "echo # keymaster.conf-sample file for details on the kmip_keymaster configuration >> proxy-server.conf"
sudo bash -c "echo # options. >> proxy-server.conf"
sudo bash -c "echo # keymaster_config_path = >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo [filter:encryption] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#encryption >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # By default all PUT or POST'ed object data and/or metadata will be encrypted. >> proxy-server.conf"
sudo bash -c "echo # Encryption of new data and/or metadata may be disabled by setting >> proxy-server.conf"
sudo bash -c "echo # disable_encryption to True. However, all encryption middleware should remain >> proxy-server.conf"
sudo bash -c "echo # in the pipeline in order for existing encrypted data to be read. >> proxy-server.conf"
sudo bash -c "echo # disable_encryption = False >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # listing_formats should be just right of the first proxy-logging middleware, >> proxy-server.conf"
sudo bash -c "echo # and left of most other middlewares. If it is not already present, it will >> proxy-server.conf"
sudo bash -c "echo # be automatically inserted for you. >> proxy-server.conf"
sudo bash -c "echo [filter:listing_formats] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#listing_formats >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo  >> proxy-server.conf"
sudo bash -c "echo # Note: Put after slo, dlo, versioned_writes, but before encryption in the >> proxy-server.conf"
sudo bash -c "echo # pipeline. >> proxy-server.conf"
sudo bash -c "echo [filter:symlink] >> proxy-server.conf"
sudo bash -c "echo use = egg:swift#symlink >> proxy-server.conf"
sudo bash -c "echo # Symlinks can point to other symlinks provided the number of symlinks in a >> proxy-server.conf"
sudo bash -c "echo # chain does not exceed the symloop_max value. If the number of chained >> proxy-server.conf"
sudo bash -c "echo # symlinks exceeds the limit symloop_max a 409 (HTTPConflict) error >> proxy-server.conf"
sudo bash -c "echo # response will be produced. >> proxy-server.conf"
sudo bash -c "echo # symloop_max = 2 >> proxy-server.conf"
